{"version":3,"sources":["webpack:///src/app/modules/general/login/login-routing.module.ts","webpack:///src/app/modules/general/login/login.module.ts","webpack:///src/app/modules/general/login/login.component.ts","webpack:///src/app/modules/general/login/login.component.html"],"names":["routes","path","component","LoginRoutingModule","forChild","LoginModule","provide","useClass","multi","LoginComponent","router","http","lrdb","authService","tokenStorage","fb","isLoggedIn","isLoginFailed","errorMessage","roles","loginForm","group","username","password","init","getToken","getUser","user","get","value","login","then","data","console","log","JSON","stringify","token","body","saveToken","saveUser","navigate","err","el","button","nativeElement","click","message","window","location","reload","closeModal","onSubmit"],"mappings":"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","file":"modules-general-login-login-module-es5.js","sourcesContent":["import {NgModule} from '@angular/core';\r\nimport {RouterModule, Routes} from '@angular/router';\r\nimport {LoginComponent} from './login.component';\r\n\r\n\r\nconst routes: Routes = [\r\n  { path: '', component: LoginComponent },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class LoginRoutingModule { }\r\n","import {NgModule} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\n\r\nimport {LoginComponent} from './login.component';\r\nimport {HTTP_INTERCEPTORS} from '@angular/common/http';\r\nimport {ErrorInterceptor} from 'src/app/_helpers';\r\nimport {LoginRoutingModule} from './login-routing.module';\r\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\r\n\r\n@NgModule({\r\n  imports: [\r\n    FormsModule,\r\n    CommonModule,\r\n    LoginRoutingModule,\r\n    ReactiveFormsModule\r\n  ],\r\n  exports: [\r\n    LoginComponent\r\n  ],\r\n  declarations: [\r\n    LoginComponent\r\n  ],\r\n  providers: [\r\n    { provide: HTTP_INTERCEPTORS, useClass: ErrorInterceptor, multi: true },\r\n    //fakeBackendProvider,\r\n  ],\r\n})\r\nexport class LoginModule { }","import {HttpClient} from '@angular/common/http';\r\nimport {Component, ElementRef, OnInit, ViewChild} from '@angular/core';\r\nimport {FormBuilder, FormGroup} from '@angular/forms';\r\nimport {Router} from '@angular/router';\r\nimport {AuthenticationService} from 'src/app/_services/authentication.service';\r\nimport {BackendService} from 'src/app/_services/import.service';\r\nimport {TokenStorageService} from 'src/app/_services/token-storage.service';\r\n\r\n@Component({\r\n    selector: 'app-login',\r\n    templateUrl: './login.component.html',\r\n    styleUrls: ['./login.component.css']\r\n})\r\nexport class LoginComponent implements OnInit {\r\n\r\n    @ViewChild('button') button: ElementRef<HTMLElement>;\r\n\r\n    loginForm: FormGroup;\r\n    isLoggedIn = false;\r\n    isLoginFailed = false;\r\n    errorMessage = '';\r\n    roles: string[] = [];\r\n\r\n    constructor(private router: Router, private http: HttpClient, private lrdb: BackendService,\r\n        private authService: AuthenticationService, private tokenStorage: TokenStorageService,\r\n        private readonly fb: FormBuilder) {\r\n        this.loginForm = this.fb.group({\r\n            username: [],\r\n            password: []\r\n\r\n        });\r\n        this.init()\r\n\r\n    }\r\n\r\n    init() {\r\n\r\n    }\r\n\r\n    closeModal() {\r\n        this.errorMessage = null\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        if (this.tokenStorage.getToken()) {\r\n            this.isLoggedIn = true;\r\n            this.roles = this.tokenStorage.getUser().roles;\r\n        }\r\n\r\n    }\r\n\r\n    onSubmit(): void {\r\n        let user = this.loginForm.get('username').value;\r\n        let password = this.loginForm.get('password').value;\r\n        this.authService.login(user, password).then(\r\n            (data) => {\r\n                console.log('data:: ' + JSON.stringify(data))\r\n                let token = data.body['accessToken'];\r\n                this.tokenStorage.saveToken(token);\r\n                this.tokenStorage.saveUser(data);\r\n\r\n                this.isLoginFailed = false;\r\n                this.isLoggedIn = true;\r\n                this.roles = this.tokenStorage.getUser().roles;\r\n                this.router.navigate(['/dashboard']);\r\n            },\r\n            err => {\r\n                let el: HTMLElement = this.button.nativeElement;\r\n                el.click();\r\n                this.errorMessage = err.message;\r\n                this.isLoginFailed = true;\r\n            }\r\n        );\r\n    }\r\n\r\n\r\n    reloadPage(): void {\r\n        window.location.reload();\r\n\r\n    }\r\n\r\n}","<button type=\"button\" [hidden]=\"true\" #button  class=\"btn btn-primary\" data-toggle=\"modal\" data-target=\"#loginModal\"></button>\r\n<!-- Modal -->\r\n<div class=\"modal fade\" id=\"loginModal\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"loginModalLabel\"\r\n    aria-hidden=\"true\">\r\n    <div class=\"modal-dialog\" role=\"document\">\r\n        <div class=\"modal-content\">\r\n            <div class=\"modal-header\">\r\n                <h5 class=\"modal-title\" id=\"loginModalLabel\">Login error</h5>\r\n                <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\r\n                    <span aria-hidden=\"true\">&times;</span>\r\n                </button>\r\n            </div>\r\n            <div class=\"modal-body\">\r\n                {{errorMessage}}\r\n            </div>\r\n            <div class=\"modal-footer\">\r\n                <button type=\"button\" class=\"btn btn-secondary\" (click)=\"closeModal()\" data-dismiss=\"modal\">Close</button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n<div class=\"col-md-6 offset-md-3 mt-5\">\r\n    <div class=\"card\">\r\n        <h4 class=\"card-header login-header\" style=\"background-color: #e20074 !important;color:whitesmoke !important\">Login</h4>\r\n        <div class=\"card-body\">\r\n            <form [formGroup]=\"loginForm\" (ngSubmit)=\"onSubmit()\">\r\n                <div class=\"form-group\">\r\n                    <label for=\"username\">Username</label>\r\n                    <input type=\"text\" formControlName=\"username\" class=\"form-control\" />\r\n                </div>\r\n                <div class=\"form-group\">\r\n                    <label for=\"password\">Password</label>\r\n                    <input type=\"password\" formControlName=\"password\" class=\"form-control\" />\r\n                </div>\r\n                <button class=\"btn btn-primary\" type=\"submit\">\r\n                    login\r\n                </button>\r\n            </form>\r\n        </div>\r\n    </div>\r\n</div>"]}